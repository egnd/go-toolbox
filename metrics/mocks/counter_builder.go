// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	metrics "github.com/egnd/go-toolbox/metrics"
	mock "github.com/stretchr/testify/mock"
)

// CounterBuilder is an autogenerated mock type for the CounterBuilder type
type CounterBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *CounterBuilder) Build() metrics.Counter {
	ret := _m.Called()

	var r0 metrics.Counter
	if rf, ok := ret.Get(0).(func() metrics.Counter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Counter)
		}
	}

	return r0
}

// With provides a mock function with given fields: _a0
func (_m *CounterBuilder) With(_a0 ...string) metrics.CounterBuilder {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 metrics.CounterBuilder
	if rf, ok := ret.Get(0).(func(...string) metrics.CounterBuilder); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.CounterBuilder)
		}
	}

	return r0
}

type mockConstructorTestingTNewCounterBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewCounterBuilder creates a new instance of CounterBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCounterBuilder(t mockConstructorTestingTNewCounterBuilder) *CounterBuilder {
	mock := &CounterBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
